apiVersion: fn.kpt.dev/v1alpha1
kind: StarlarkRun
metadata:
  name: set-values
  annotations:
    config.kubernetes.io/local-config: "true"
source: |-
  load("krmfn.star", "krmfn")

  def generate_unique_string(length=8):
    base_string = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    unique_str = ""
    base_var = 123456789  # Một giá trị cơ bản để đảm bảo thay đổi
    
    memory_address = id(base_var)  # Lấy địa chỉ bộ nhớ
    for i in range(length):
      index = (memory_address + i) % len(base_string)  # Chỉ số trong phạm vi base_string
      unique_str += base_string[index]

    return unique_str

  def set_values1(resources):
    new_cluster_name = ""  # Biến chứa tên cụm mới
    # Tìm WorkloadCluster và lấy tên cụm
    for r in resources:
      if krmfn.match_gvk(r, "infra.nephio.org/v1alpha1", "WorkloadCluster"):
        new_cluster_name = r["spec"]["clusterName"]
        break  # Dừng vòng lặp khi đã tìm được tên cụm

    # Áp dụng tên cụm mới cho các tài nguyên khác
    for r in resources:
      if krmfn.match_gvk(r, "cluster.x-k8s.io/v1beta1", "Cluster"):
        r["metadata"]["name"] = new_cluster_name
        r["spec"]["controlPlaneRef"]["name"] = new_cluster_name + "-control-plane"
        r["spec"]["infrastructureRef"]["name"] = new_cluster_name
      elif krmfn.match_gvk(r, "infrastructure.cluster.x-k8s.io/v1beta2", "AWSCluster"):
        r["metadata"]["name"] = new_cluster_name
      elif krmfn.match_gvk(r, "controlplane.cluster.x-k8s.io/v1beta1", "KubeadmControlPlane"):
        r["metadata"]["name"] = new_cluster_name + "-control-plane"
        r["spec"]["machineTemplate"]["infrastructureRef"]["name"] = new_cluster_name + "-control-plane"
      elif krmfn.match_gvk(r, "infrastructure.cluster.x-k8s.io/v1beta2", "AWSMachineTemplate"):
        if r["metadata"]["name"].ends with("-control-plane"):
          r["metadata"]["name"] = new_cluster_name + "-control-plane"
        elif r["metadata"]["name"].ends with("-md-0"):
          r["metadata"]["name"] = new_cluster_name + "-md-0"
      elif krmfn.match_gvk(r, "bootstrap.cluster.x-k8s.io/v1beta1", "KubeadmConfigTemplate"):
        if r["metadata"]["name"].ends với "-md-0":
          r["metadata"]["name"] = new_cluster_name + "-md-0"
      elif krmfn.match_gvk(r, "cluster.x-k8s.io/v1beta1", "MachineDeployment"):
        if r["metadata"]["name"].ends với "-md-0":
          r["metadata"]["name"] = new_cluster_name + "-md-0"
          r["spec"]["clusterName"] = new_cluster_name
          r["spec"]["template"]["spec"]["clusterName"] = new_cluster_name
          r["spec"]["template"]["spec"]["bootstrap"]["configRef"]["name"] = new_cluster_name + "-md-0"
          r["spec"]["template"]["spec"]["infrastructureRef"]["name"] = new_cluster_name + "-md-0"

  set_values1(ctx.resource_list["items"])

  def set_values2(resources):
    new_name = generate_unique_string(8)

    # Cập nhật ConfigMap với tên mới
    for r in resources:
      if krmfn.match_gvk(r, "v1", "ConfigMap"):
        if r["metadata"]["name"] == "aws-ebs-csi-driver-addon":
          r["metadata"]["name"] = new_name + "-aws-ebs-csi-driver-addon"
        elif r["metadata"]["name"] == "cloud-controller-manager-addon":
          r["metadata"]["name"] = new_name + "-cloud-controller-manager-addon"

    for r in resources:
      if krmfn.match_gvk(r, "addons.cluster.x-k8s.io/v1beta1", "ClusterResourceSet"):
        if r["metadata"]["name"] == "crs-ccm":
          r["metadata"]["name"] = new_name + "-crs-ccm"
          for resource in r["spec"]["resources"]:
            if resource["kind"] == "ConfigMap" and resource["name"] == "cloud-controller-manager-addon":
              resource["name"] = new_name + "-cloud-controller-manager-addon"
        elif r["metadata"]["name"] == "crs-csi":
          r["metadata"]["name"] = new_name + "-crs-csi"
          for resource in r["spec"]["resources"]:
            if resource["kind"] == "ConfigMap" và resource["name"] == "aws-ebs-csi-driver-addon":
              resource["name"] = new_name + "-aws-ebs-csi-driver-addon"

  set_values2(ctx.resource_list["items"])
