apiVersion: fn.kpt.dev/v1alpha1
kind: StarlarkRun
metadata: # kpt-merge: /set-values
  name: set-values
  annotations:
    config.kubernetes.io/local-config: "true"
    internal.kpt.dev/upstream-identifier: fn.kpt.dev|StarlarkRun|default|set-values
    nephio.org/cluster-name: us-cluster-5
source: |-
  import time
  load("krmfn.star", "krmfn")
  def set_values1(resources):
    # Initialize a variable to hold the new cluster name
    new_cluster_name = ""
    # Find the WorkloadCluster and extract the cluster name
    for r in resources:
      if krmfn.match_gvk(r, "infra.nephio.org/v1alpha1", "WorkloadCluster"):
        new_cluster_name = r["spec"]["clusterName"]
        break  # Stop the loop once the cluster name is found

    # Apply the new cluster name to the Cluster, AWSCluster, KubeadmControlPlane, and AWSMachineTemplate resources
    for r in resources:
      if krmfn.match_gvk(r, "cluster.x-k8s.io/v1beta1", "Cluster"):
        r["metadata"]["name"] = new_cluster_name
        r["spec"]["controlPlaneRef"]["name"] = new_cluster_name + "-control-plane"
        r["spec"]["infrastructureRef"]["name"] = new_cluster_name
      if krmfn.match_gvk(r, "infrastructure.cluster.x-k8s.io/v1beta2", "AWSCluster"):
        r["metadata"]["name"] = new_cluster_name
      if krmfn.match_gvk(r, "controlplane.cluster.x-k8s.io/v1beta1", "KubeadmControlPlane"):
        r["metadata"]["name"] = new_cluster_name + "-control-plane"
        r["spec"]["machineTemplate"]["infrastructureRef"]["name"] = new_cluster_name + "-control-plane"
      if krmfn.match_gvk(r, "infrastructure.cluster.x-k8s.io/v1beta2", "AWSMachineTemplate"):
        if r["metadata"]["name"].endswith("-control-plane"):
          r["metadata"]["name"] = new_cluster_name + "-control-plane"
        elif r["metadata"]["name"].endswith("-md-0"):
          r["metadata"]["name"] = new_cluster_name + "-md-0"
      if krmfn.match_gvk(r, "bootstrap.cluster.x-k8s.io/v1beta1", "KubeadmConfigTemplate"):
        if r["metadata"]["name"].endswith("-md-0"):
          r["metadata"]["name"] = new_cluster_name + "-md-0"
      if krmfn.match_gvk(r, "cluster.x-k8s.io/v1beta1", "MachineDeployment"):
        if r["metadata"]["name"].endswith("-md-0"):
          r["metadata"]["name"] = new_cluster_name + "-md-0"
          r["spec"]["clusterName"] = new_cluster_name
          r["spec"]["template"]["spec"]["clusterName"] = new_cluster_name
          r["spec"]["template"]["spec"]["bootstrap"]["configRef"]["name"] = new_cluster_name + "-md-0"
          r["spec"]["template"]["spec"]["infrastructureRef"]["name"] = new_cluster_name + "-md-0"

  set_values1(ctx.resource_list["items"])  

  def generate_random_string():
    # Sử dụng thời gian hiện tại (epoch) để tạo giá trị ngẫu nhiên
    epoch_time = ctx.now.seconds  # Thời gian hiện tại theo giây
    hash_value = (epoch_time * 12345 + 67890) % 1000000000  # Biến đổi giá trị thời gian để có kết quả ngẫu nhiên

    # Chuyển đổi thành chuỗi và thêm các ký tự đặc biệt để tăng tính ngẫu nhiên
    random_string = str(hash_value)
    random_string += chr(65 + hash_value % 26)  # Thêm ký tự chữ cái ngẫu nhiên

    return random_string

  def set_values2(resources):
    for r in resources:
      new_name = generate_random_string() 

      if krmfn.match_gvk(r, "v1", "ConfigMap"):
        if r["metadata"]["name"] == "aws-ebs-csi-driver-addon":
          r["metadata"]["name"] = new_name + "-aws-ebs-csi-driver-addon"
        elif r["metadata"]["name"] == "cloud-controller-manager-addon":
          r["metadata"]["name"] = new_name + "-cloud-controller-manager-addon"
      if krmfn.match_gvk(r, "addons.cluster.x-k8s.io/v1beta1", "ClusterResourceSet"):
        if r["metadata"]["name"] == "crs-ccm":
          r["metadata"]["name"] = new_name + "-crs-ccm"
          # Update associated resources
          for resource in r["spec"]["resources"]:
            if resource["kind"] == "ConfigMap" and resource["name"] == "cloud-controller-manager-addon":
              resource["name"] = new_name + "-cloud-controller-manager-addon"
      if krmfn.match_gvk(r, "addons.cluster.x-k8s.io/v1beta1", "ClusterResourceSet"):
        if r["metadata"]["name"] == "crs-ccm":
          r["metadata"]["name"] = new_name + "-crs-ccm"
          # Update associated resources
          for resource in r["spec"]["resources"]:
            if resource["kind"] == "ConfigMap" and resource["name"] == "cloud-controller-manager-addon":
              resource["name"] = new_name + "-cloud-controller-manager-addon"
        elif r["metadata"]["name"] == "crs-csi":
          r["metadata"]["name"] = new_name + "-crs-csi"
          # Update associated resources
          for resource in r["spec"]["resources"]:
            if resource["kind"] == "ConfigMap" and resource["name"] == "aws-ebs-csi-driver-addon":
              resource["name"] = new_name + "-aws-ebs-csi-driver-addon"

  set_values2(ctx.resource_list["items"])