apiVersion: fn.kpt.dev/v1alpha1
kind: StarlarkRun
metadata:
  name: set-values
  annotations:
    config.kubernetes.io/local-config: "true"
source: |-
  load("krmfn.star", "krmfn")

  def generate_unique_string(length=8):
    base_string = "abcdefghijklmnopqrstuvwxyz0123456789"
    unique_str = ""
    for i in range(length):
      unique_str += base_string[int(i * 3.14) % len(base_string)]
    return unique_str

  def set_values(resources):
    # Initialize a variable to hold the new cluster name
    new_cluster_name = ""
    # Find the WorkloadCluster and extract the cluster name
    for r in resources:
      if krmfn.match_gvk(r, "infra.nephio.org/v1alpha1", "WorkloadCluster"):
        new_cluster_name = r["spec"]["clusterName"]
        break  # Stop the loop once the cluster name is found

    # Apply the new cluster name to Cluster, AWSCluster, KubeadmControlPlane, and AWSMachineTemplate resources
    for r in resources:
      if krmfn.match_gvk(r, "cluster.x-k8s.io/v1beta1", "Cluster"):
        r["metadata"]["name"] = new_cluster_name
        r["spec"]["controlPlaneRef"]["name"] = new_cluster_name + "-control-plane"
        r["spec"]["infrastructureRef"]["name"] = new_cluster_name
      if krmfn.match_gvk(r, "infrastructure.cluster.x-k8s.io/v1beta2", "AWSCluster"):
        r["metadata"]["name"] = new_cluster_name
      if krmfn.match_gvk(r, "controlplane.cluster.x-k8s.io/v1beta1", "KubeadmControlPlane"):
        r["metadata"]["name"] = new_cluster_name + "-control-plane"
        r["spec"]["machineTemplate"]["infrastructureRef"]["name"] = new_cluster_name + "-control-plane"
      if krmfn.match_gvk(r, "infrastructure.cluster.x-k8s.io/v1beta2", "AWSMachineTemplate"):
        if r["metadata"]["name"].ends_with("-control-plane"):
          r["metadata"]["name"] = new_cluster_name + "-control-plane"
        elif r["metadata"]["name"].ends_with("-md-0"):
          r["metadata"]["name"] = new_cluster_name + "-md-0"
      if krmfn.match_gvk(r, "bootstrap.cluster.x-k8s.io/v1beta1", "KubeadmConfigTemplate"):
        if r["metadata"]["name"].ends_with("-md-0"):
          r["metadata"]["name"] = new_cluster_name + "-md-0"
      if krmfn.match_gvk(r, "cluster.x-k8s.io/v1beta1", "MachineDeployment"):
        if r["metadata"]["name"].ends_with("-md-0"):
          r["metadata"]["name"] = new_cluster_name + "-md-0"
          r["spec"]["clusterName"] = new_cluster_name
          r["spec"]["template"]["spec"]["clusterName"] = new_cluster_name
          r["spec"]["template"]["spec"]["bootstrap"]["configRef"]["name"] = new_cluster_name + "-md-0"
          r["spec"]["template"]["spec"]["infrastructureRef"]["name"] = new_cluster_name + "-md-0"

    # Create a unique name
    unique_suffix = generate_unique_string()

    # Rename specific resources based on the new cluster name and unique suffix
    fixed_resource_names = [
      "crs-ccm",
      "crs-csi",
      "aws-ebs-csi-driver-addon",
      "cloud-controller-manager-addon"
    ]

    for r in resources:
      if krmfn.match_gvk(r, "addons.cluster.x-k8s.io/v1beta1", "ClusterResourceSet"):
        name = r["metadata"]["name"]
        if name in fixed_resource_names:
          r["metadata"]["name"] = f"{new_cluster_name}-{unique_suffix}-{name}"
          # Update associated resources if needed
          if "resources" in r["spec"]:
            for res in r["spec"]["resources"]:
              if res["kind"] == "ConfigMap" and res["name"] in fixed_resource_names:
                res["name"] = f"{new_cluster_name}-{unique_suffix}-{res['name']}"

      elif krmfn.match_gvk(r, "v1", "ConfigMap"):
        name = r["metadata"]["name"]
        if name in fixed_resource_names:
          r["metadata"]["name"] = f"{new_cluster_name}-{unique_suffix}-{name}"

  set_values(ctx.resource_list["items"])
